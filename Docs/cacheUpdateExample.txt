
***************** 

import { useApolloClient } from "@apollo/client"
const client = useApolloClient()

***************** 


* Read Query:

const READ_USER = gql`
    query GetCurrentLoggedUser {
        getCurrentLoggedUser {
            user {
                id
                name
                email
                picture
            }
        }
    }
`;
const result = client.readQuery({
    query: READ_USER,
});
console.log("user ", result.getCurrentLoggedUser.user);


* Write query:

const UPDATE_LOGGED_USER = gql`
    query GetCurrentLoggedUser { 
        user {
            picture
        }
        
    }
`;

const result = client.writeQuery({
    query: UPDATE_LOGGED_USER,
    data: {
        user: {
            __typename: "User",
            picture: "https://jms7045blob.blob.core.windows.net/images/default-user-image.png"

        }
    }
});


works but not update the ui

client.writeFragment({
    id: "Message:d31bcbc5-9d81-4d5b-99dc-72c24858326b",
    fragment: messageFragment,
    data: {
        body: "TESTE!!!!!",
    },
});

const result = client.readFragment({
    id: "Message:d31bcbc5-9d81-4d5b-99dc-72c24858326b",
    fragment: messageFragment,
});


 /*
        let aux: ChatMessage[] = [];

        chatMessages?.forEach((x) => {
            aux.push(x);
        });
        aux.push(newMessage);

        client.writeQuery({
            query: GET_CHATS,
            data: {
                getChats: {
                    __typename: "ChatsResponse",
                    errors: null,
                    chats: {
                        __typename: "Chat",
                        id: currentChat?.id,
                        participants: currentChat?.participants,
                        messages: aux,
                    },
                },
            },
            variables: {
                participant: user?.id,
            },
        }); */


const handleUpdateStateFromCache = (id: string) => {
        const newMessage: ChatMessage | null = client.readFragment({
            id: `Message:${id}`,
            fragment: MESSAGE_FRAGMENT,
        });

        if (newMessage) {
            if (chatMessages?.length) {
                setChatMessages((prevMessages) => [
                    ...prevMessages!,
                    newMessage,
                ]);
            } else {
                setChatMessages([newMessage]);
            }
        }
    };